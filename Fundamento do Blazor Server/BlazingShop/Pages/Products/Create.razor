@page "/products/create"

@inject AppDbContext _context
@inject NavigationManager _navigationManager

<h1>New Product</h1>

<EditForm Model="_product" OnValidSubmit="@HandleSubmitAsync">

    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="mb-3">
        <label for="Title" class="form-label">Title</label>
        <InputText class="form-control" type="text" id="Title" @bind-Value="_product.Title"/>
    </div>

    <div class="mb-3">
        <label for="Price" class="form-label">Price</label>
        <InputNumber class="form-control" type="number" id="Price" @bind-Value="_product.Price" />
    </div>

    <div class="mb-3">
        <label for="CategoryId" class="form-label">Category</label>
        <InputSelect id="CategoryId" @bind-Value="_product.CategoryId" class="form-control">
            @foreach(var entity in _categories)
            {
                <option value="@entity.Id">@entity.Title</option>
            }
        </InputSelect>
    </div>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @_errorMessage  
        </div>
    }

    <button class="btn btn-success" type="submit">Save</button>

</EditForm>

@code {
    Product _product = new();
    List<Category> _categories = new();
    string? _errorMessage = null;

    protected override async Task OnInitializedAsync()
    {
        _categories = await _context
            .categories
            .AsNoTracking()
            .ToListAsync();

        Console.WriteLine($"Numero da cat{_categories[0].Id}");

        _product.CategoryId = _categories[0].Id;
    }

    async Task HandleSubmitAsync()
    {
        try
        {
            await _context.products.AddAsync(_product);
            await _context.SaveChangesAsync();
            _navigationManager.NavigateTo("/products");
        }
        catch
        {
            _errorMessage = "Falha ao salvar no banco"; 
        }
    }
}
