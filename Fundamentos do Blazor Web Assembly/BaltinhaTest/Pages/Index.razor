@page "/"
@using BaltinhaTest.Models
@using System.Text.Json

@inject HttpClient _client

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>
<hr />

@if(categories is null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <td>Id</td>
                <td>Name</td>
                <td>Slug</td>
                <td></td>
            </tr>
        </thead>
        <tbody>
            @foreach(var entity in categories)
            {
                <tr>
                    <td>@entity.id</td>
                    <td>@entity.name</td>
                    <td>@entity.slug</td>
                    <td><button class="btn btn-info" @onclick="() => GetAsync(entity.id)">EDIT</button></td>
                </tr>                
            }
            
        </tbody>
    </table>
}


<hr />
<div class="form-control">
    <div class="form-group">
        <label>Id</label>
        <input type="text" class="form-control" readonly @bind="category.id">
    </div>
    <div class="form-group">
        <label >Name</label>
        <input type="text" class="form-control" @bind="category.name">        
    </div>
    <div class="form-group">
        <label>Slug</label>
        <input type="text" class="form-control" @bind="category.slug">
    </div>
    @if (category.id != 0)
    {
        <button class="btn btn-primary" @onclick="UpsertAsync">Salvar</button>
        <button class="btn btn-info" @onclick="New">Nova</button>
    }
    else
    {
        <button class="btn btn-primary" @onclick="UpsertAsync">Criar</button>       
    }

    
    @if(category.id != 0)
    {
        <button class="btn btn-danger" @onclick="DeleteAsync">Deletar</button>
    }
    
</div>

@code{
    private List<Category>? categories = new();
    private Category? category = new();

    protected override async Task OnInitializedAsync()
    {
        categories = await _client.GetFromJsonAsync<List<Category>>("v1/categories");
    }

    private async Task UpsertAsync()
    {
        try
        {
            if(category?.id == 0)
            {
                var resposta = await _client.PostAsJsonAsync("v1/categories", category);
                if (resposta.IsSuccessStatusCode)
                {
                    var conteudo = await resposta.Content.ReadAsStringAsync();
                    var cate = JsonSerializer.Deserialize<Category>(conteudo);
                    if (cate is not null)
                    {
                        categories?.Add(cate);
                        New();
                    }
                }
                else
                {
                    Console.WriteLine("Erro de validação");
                }
            }
            else
            {
                var resposta = await _client.PutAsJsonAsync($"v1/categories/{category?.id}", category);

                var cate = categories?.FirstOrDefault(x => x.id == category?.id);

                if(cate is not null)
                {
                    cate.name = category?.name;
                    cate.slug = category?.slug; 
                }                
            }


        }
        catch(Exception ex)
        {
            Console.WriteLine($"Erro: {ex.Message}");
        }

    }

    public async Task GetAsync(int id)
    {
        try
        {
            var resposta = await _client.GetAsync($"v1/categories/{id}");
            if (resposta.IsSuccessStatusCode)
            {
                var conteudo = await resposta.Content.ReadAsStringAsync();
                category = JsonSerializer.Deserialize<Category>(conteudo);
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine($"Erro: {ex.Message}");
        }
    }


    public async Task DeleteAsync()
    {
        category = await _client.DeleteFromJsonAsync<Category>($"v1/categories/{category?.id}");
    }


    public void New()
    {
        category = new();
    }
}