@page "/products/create"
@inject NavigationManager _navigation
@inject ApplicationDbContext _context
@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>Cadastrar Produto</PageTitle>

<h1>Novo Produto</h1>
<hr />

<EditForm Model="@product" OnValidSubmit="OnValidSubmitAsync">
    <DataAnnotationsValidator /><ValidationSummary />
    <div class="mb-3">
        <label class="form-label">Nome do Produto</label>
        <InputText class="form-control" @bind-Value="product.title" />
    </div>
    <div class="mb-3">
        <label class="form-label">Descrição do Produto</label>
        <InputText class="form-control" @bind-Value="product.description" />
    </div>
    <br />
    <div class="mb-3">
        <label class="form-label">Preço do Produto</label>
        <InputNumber class="form-control" @bind-Value="product.price" />
    </div>
    <div class="mb-3">
        <label class="form-label">Categoria</label>
        <InputSelect @bind-Value="product.categoryId" class="form-select">
            <option>Selecione...</option>
            @foreach(var entity in categories)
            {
                <option value="@entity.id">@entity.title</option>
            }
        </InputSelect>
    </div>
    <button class="btn btn-primary" type="submit">Criar</button>
    <a href="/products/index">Cancel</a>
</EditForm>

@code {
    public Product product { get; set; } = new();
    public IEnumerable<Category> categories { get; set; } = Enumerable.Empty<Category>();

    protected override async Task OnInitializedAsync()
    {
        categories = await _context.categories
            .AsNoTracking()
            .OrderBy(x => x.title)
            .ToListAsync();
    }

    public async Task OnValidSubmitAsync()
    {
        Console.WriteLine($"ID da categoria no produto: {product.categoryId}");
        await _context.products.AddAsync(product);
        await _context.SaveChangesAsync();
        _navigation.NavigateTo("/products/index");
    }
}
